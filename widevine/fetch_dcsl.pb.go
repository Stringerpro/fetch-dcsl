// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bin/fetch_dcsl.proto

package widevine

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProvisionedDeviceInfo_WvSecurityLevel int32

const (
	// Defined in Widevine Security Integration Guide for DASH on Android:
	// http://doc/1Zum-fcJeoIw6KG1kDP_KepIE5h9gAZg0PaMtemBvk9c/edit#heading=h.1t3h5sf
	ProvisionedDeviceInfo_LEVEL_UNSPECIFIED ProvisionedDeviceInfo_WvSecurityLevel = 0
	ProvisionedDeviceInfo_LEVEL_1           ProvisionedDeviceInfo_WvSecurityLevel = 1
	ProvisionedDeviceInfo_LEVEL_2           ProvisionedDeviceInfo_WvSecurityLevel = 2
	ProvisionedDeviceInfo_LEVEL_3           ProvisionedDeviceInfo_WvSecurityLevel = 3
)

var ProvisionedDeviceInfo_WvSecurityLevel_name = map[int32]string{
	0: "LEVEL_UNSPECIFIED",
	1: "LEVEL_1",
	2: "LEVEL_2",
	3: "LEVEL_3",
}

var ProvisionedDeviceInfo_WvSecurityLevel_value = map[string]int32{
	"LEVEL_UNSPECIFIED": 0,
	"LEVEL_1":           1,
	"LEVEL_2":           2,
	"LEVEL_3":           3,
}

func (x ProvisionedDeviceInfo_WvSecurityLevel) Enum() *ProvisionedDeviceInfo_WvSecurityLevel {
	p := new(ProvisionedDeviceInfo_WvSecurityLevel)
	*p = x
	return p
}

func (x ProvisionedDeviceInfo_WvSecurityLevel) String() string {
	return proto.EnumName(ProvisionedDeviceInfo_WvSecurityLevel_name, int32(x))
}

func (x *ProvisionedDeviceInfo_WvSecurityLevel) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProvisionedDeviceInfo_WvSecurityLevel_value, data, "ProvisionedDeviceInfo_WvSecurityLevel")
	if err != nil {
		return err
	}
	*x = ProvisionedDeviceInfo_WvSecurityLevel(value)
	return nil
}

func (ProvisionedDeviceInfo_WvSecurityLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_81b025f3010d998c, []int{0, 0}
}

// Widevine initial provisioning / bootstrapping method. DRM certificates are
// required for retrieving licenses, so if a DRM certificate is not initially
// provisioned, then the provisioned credentials will be used to provision
// a DRM certificate via the Widevine Provisioning Service.
type ProvisionedDeviceInfo_ProvisioningMethod int32

const (
	// Don't use this.
	ProvisionedDeviceInfo_PROVISIONING_METHOD_UNSPECIFIED ProvisionedDeviceInfo_ProvisioningMethod = 0
	// Factory-provisioned device-unique keybox.
	ProvisionedDeviceInfo_FACTORY_KEYBOX ProvisionedDeviceInfo_ProvisioningMethod = 1
	// Factory-provisioned device-unique OEM certificate.
	ProvisionedDeviceInfo_FACTORY_OEM_DEVICE_CERTIFICATE ProvisionedDeviceInfo_ProvisioningMethod = 2
	// Factory-provisioned model-group OEM certificate.
	ProvisionedDeviceInfo_FACTORY_OEM_GROUP_CERTIFICATE ProvisionedDeviceInfo_ProvisioningMethod = 3
	// Factory-provisioned model-group DRM certificate (Level-3 "baked in").
	ProvisionedDeviceInfo_FACTORY_DRM_GROUP_CERTIFICATE ProvisionedDeviceInfo_ProvisioningMethod = 4
	// OTA-provisioned keybox (Level-1 ARC++).
	ProvisionedDeviceInfo_OTA_KEYBOX ProvisionedDeviceInfo_ProvisioningMethod = 5
	// OTA-provisioned device-unique OEM certificate.
	ProvisionedDeviceInfo_OTA_OEM_DEVICE_CERTIFICATE ProvisionedDeviceInfo_ProvisioningMethod = 6
	// OTA-provisioned model-group OEM certificate.
	ProvisionedDeviceInfo_OTA_OEM_GROUP_CERTIFICATE ProvisionedDeviceInfo_ProvisioningMethod = 7
	// OTA-provisioned device-unique DRM certificate (Bedrock).
	ProvisionedDeviceInfo_OTA_DRM_DEVICE_CERTIFICATE ProvisionedDeviceInfo_ProvisioningMethod = 8
)

var ProvisionedDeviceInfo_ProvisioningMethod_name = map[int32]string{
	0: "PROVISIONING_METHOD_UNSPECIFIED",
	1: "FACTORY_KEYBOX",
	2: "FACTORY_OEM_DEVICE_CERTIFICATE",
	3: "FACTORY_OEM_GROUP_CERTIFICATE",
	4: "FACTORY_DRM_GROUP_CERTIFICATE",
	5: "OTA_KEYBOX",
	6: "OTA_OEM_DEVICE_CERTIFICATE",
	7: "OTA_OEM_GROUP_CERTIFICATE",
	8: "OTA_DRM_DEVICE_CERTIFICATE",
}

var ProvisionedDeviceInfo_ProvisioningMethod_value = map[string]int32{
	"PROVISIONING_METHOD_UNSPECIFIED": 0,
	"FACTORY_KEYBOX":                  1,
	"FACTORY_OEM_DEVICE_CERTIFICATE":  2,
	"FACTORY_OEM_GROUP_CERTIFICATE":   3,
	"FACTORY_DRM_GROUP_CERTIFICATE":   4,
	"OTA_KEYBOX":                      5,
	"OTA_OEM_DEVICE_CERTIFICATE":      6,
	"OTA_OEM_GROUP_CERTIFICATE":       7,
	"OTA_DRM_DEVICE_CERTIFICATE":      8,
}

func (x ProvisionedDeviceInfo_ProvisioningMethod) Enum() *ProvisionedDeviceInfo_ProvisioningMethod {
	p := new(ProvisionedDeviceInfo_ProvisioningMethod)
	*p = x
	return p
}

func (x ProvisionedDeviceInfo_ProvisioningMethod) String() string {
	return proto.EnumName(ProvisionedDeviceInfo_ProvisioningMethod_name, int32(x))
}

func (x *ProvisionedDeviceInfo_ProvisioningMethod) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProvisionedDeviceInfo_ProvisioningMethod_value, data, "ProvisionedDeviceInfo_ProvisioningMethod")
	if err != nil {
		return err
	}
	*x = ProvisionedDeviceInfo_ProvisioningMethod(value)
	return nil
}

func (ProvisionedDeviceInfo_ProvisioningMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_81b025f3010d998c, []int{0, 1}
}

type DeviceCertificateStatus_DeprecatedStatus int32

const (
	DeviceCertificateStatus_DEPRECATED_VALID   DeviceCertificateStatus_DeprecatedStatus = 0
	DeviceCertificateStatus_DEPRECATED_REVOKED DeviceCertificateStatus_DeprecatedStatus = 1
)

var DeviceCertificateStatus_DeprecatedStatus_name = map[int32]string{
	0: "DEPRECATED_VALID",
	1: "DEPRECATED_REVOKED",
}

var DeviceCertificateStatus_DeprecatedStatus_value = map[string]int32{
	"DEPRECATED_VALID":   0,
	"DEPRECATED_REVOKED": 1,
}

func (x DeviceCertificateStatus_DeprecatedStatus) Enum() *DeviceCertificateStatus_DeprecatedStatus {
	p := new(DeviceCertificateStatus_DeprecatedStatus)
	*p = x
	return p
}

func (x DeviceCertificateStatus_DeprecatedStatus) String() string {
	return proto.EnumName(DeviceCertificateStatus_DeprecatedStatus_name, int32(x))
}

func (x *DeviceCertificateStatus_DeprecatedStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeviceCertificateStatus_DeprecatedStatus_value, data, "DeviceCertificateStatus_DeprecatedStatus")
	if err != nil {
		return err
	}
	*x = DeviceCertificateStatus_DeprecatedStatus(value)
	return nil
}

func (DeviceCertificateStatus_DeprecatedStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_81b025f3010d998c, []int{1, 0}
}

type DeviceCertificateStatus_Status int32

const (
	DeviceCertificateStatus_STATUS_UNKNOWN    DeviceCertificateStatus_Status = 0
	DeviceCertificateStatus_STATUS_IN_TESTING DeviceCertificateStatus_Status = 10
	DeviceCertificateStatus_STATUS_RELEASED   DeviceCertificateStatus_Status = 20
	DeviceCertificateStatus_STATUS_TEST_ONLY  DeviceCertificateStatus_Status = 30
	DeviceCertificateStatus_STATUS_REVOKED    DeviceCertificateStatus_Status = 40
)

var DeviceCertificateStatus_Status_name = map[int32]string{
	0:  "STATUS_UNKNOWN",
	10: "STATUS_IN_TESTING",
	20: "STATUS_RELEASED",
	30: "STATUS_TEST_ONLY",
	40: "STATUS_REVOKED",
}

var DeviceCertificateStatus_Status_value = map[string]int32{
	"STATUS_UNKNOWN":    0,
	"STATUS_IN_TESTING": 10,
	"STATUS_RELEASED":   20,
	"STATUS_TEST_ONLY":  30,
	"STATUS_REVOKED":    40,
}

func (x DeviceCertificateStatus_Status) Enum() *DeviceCertificateStatus_Status {
	p := new(DeviceCertificateStatus_Status)
	*p = x
	return p
}

func (x DeviceCertificateStatus_Status) String() string {
	return proto.EnumName(DeviceCertificateStatus_Status_name, int32(x))
}

func (x *DeviceCertificateStatus_Status) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DeviceCertificateStatus_Status_value, data, "DeviceCertificateStatus_Status")
	if err != nil {
		return err
	}
	*x = DeviceCertificateStatus_Status(value)
	return nil
}

func (DeviceCertificateStatus_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_81b025f3010d998c, []int{1, 1}
}

// Contains device model information for a provisioned device.
type ProvisionedDeviceInfo struct {
	// Widevine system ID for the device. Mandatory.
	SystemId *uint32 `protobuf:"varint,1,opt,name=system_id,json=systemId" json:"system_id,omitempty"`
	// Name of system-on-a-chip. Optional.
	Soc *string `protobuf:"bytes,2,opt,name=soc" json:"soc,omitempty"`
	// Name of manufacturer. Optional.
	Manufacturer *string `protobuf:"bytes,3,opt,name=manufacturer" json:"manufacturer,omitempty"`
	// Manufacturer's model name. Matches "brand" in device metadata. Optional.
	Model *string `protobuf:"bytes,4,opt,name=model" json:"model,omitempty"`
	// Type of device (Phone, Tablet, TV, etc).
	DeviceType *string `protobuf:"bytes,5,opt,name=device_type,json=deviceType" json:"device_type,omitempty"`
	// Device model year. Optional.
	ModelYear *uint32 `protobuf:"varint,6,opt,name=model_year,json=modelYear" json:"model_year,omitempty"`
	// Widevine-defined security level. Optional.
	SecurityLevel *ProvisionedDeviceInfo_WvSecurityLevel `protobuf:"varint,7,opt,name=security_level,json=securityLevel,enum=widevine.ProvisionedDeviceInfo_WvSecurityLevel,def=0" json:"security_level,omitempty"`
	// True if the certificate corresponds to a test (non production) device.
	// Optional.
	TestDevice *bool `protobuf:"varint,8,opt,name=test_device,json=testDevice,def=0" json:"test_device,omitempty"`
	// Indicates the type of device root of trust which was factory provisioned.
	ProvisioningMethod   *ProvisionedDeviceInfo_ProvisioningMethod `protobuf:"varint,9,opt,name=provisioning_method,json=provisioningMethod,enum=widevine.ProvisionedDeviceInfo_ProvisioningMethod" json:"provisioning_method,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *ProvisionedDeviceInfo) Reset()         { *m = ProvisionedDeviceInfo{} }
func (m *ProvisionedDeviceInfo) String() string { return proto.CompactTextString(m) }
func (*ProvisionedDeviceInfo) ProtoMessage()    {}
func (*ProvisionedDeviceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_81b025f3010d998c, []int{0}
}

func (m *ProvisionedDeviceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProvisionedDeviceInfo.Unmarshal(m, b)
}
func (m *ProvisionedDeviceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProvisionedDeviceInfo.Marshal(b, m, deterministic)
}
func (m *ProvisionedDeviceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProvisionedDeviceInfo.Merge(m, src)
}
func (m *ProvisionedDeviceInfo) XXX_Size() int {
	return xxx_messageInfo_ProvisionedDeviceInfo.Size(m)
}
func (m *ProvisionedDeviceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProvisionedDeviceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProvisionedDeviceInfo proto.InternalMessageInfo

const Default_ProvisionedDeviceInfo_SecurityLevel ProvisionedDeviceInfo_WvSecurityLevel = ProvisionedDeviceInfo_LEVEL_UNSPECIFIED
const Default_ProvisionedDeviceInfo_TestDevice bool = false

func (m *ProvisionedDeviceInfo) GetSystemId() uint32 {
	if m != nil && m.SystemId != nil {
		return *m.SystemId
	}
	return 0
}

func (m *ProvisionedDeviceInfo) GetSoc() string {
	if m != nil && m.Soc != nil {
		return *m.Soc
	}
	return ""
}

func (m *ProvisionedDeviceInfo) GetManufacturer() string {
	if m != nil && m.Manufacturer != nil {
		return *m.Manufacturer
	}
	return ""
}

func (m *ProvisionedDeviceInfo) GetModel() string {
	if m != nil && m.Model != nil {
		return *m.Model
	}
	return ""
}

func (m *ProvisionedDeviceInfo) GetDeviceType() string {
	if m != nil && m.DeviceType != nil {
		return *m.DeviceType
	}
	return ""
}

func (m *ProvisionedDeviceInfo) GetModelYear() uint32 {
	if m != nil && m.ModelYear != nil {
		return *m.ModelYear
	}
	return 0
}

func (m *ProvisionedDeviceInfo) GetSecurityLevel() ProvisionedDeviceInfo_WvSecurityLevel {
	if m != nil && m.SecurityLevel != nil {
		return *m.SecurityLevel
	}
	return Default_ProvisionedDeviceInfo_SecurityLevel
}

func (m *ProvisionedDeviceInfo) GetTestDevice() bool {
	if m != nil && m.TestDevice != nil {
		return *m.TestDevice
	}
	return Default_ProvisionedDeviceInfo_TestDevice
}

func (m *ProvisionedDeviceInfo) GetProvisioningMethod() ProvisionedDeviceInfo_ProvisioningMethod {
	if m != nil && m.ProvisioningMethod != nil {
		return *m.ProvisioningMethod
	}
	return ProvisionedDeviceInfo_PROVISIONING_METHOD_UNSPECIFIED
}

// Contains DRM and OEM certificate status and device information for a
// specific system ID.
// TODO(user): Move this to its own file.
type DeviceCertificateStatus struct {
	// Serial number of the intermediate DrmCertificate to which this
	// message refers. Required.
	DrmSerialNumber []byte `protobuf:"bytes,1,opt,name=drm_serial_number,json=drmSerialNumber" json:"drm_serial_number,omitempty"`
	// Status of the certificate. Optional & deprecated in favor of |status|
	// below.
	DeprecatedStatus *DeviceCertificateStatus_DeprecatedStatus `protobuf:"varint,2,opt,name=deprecated_status,json=deprecatedStatus,enum=widevine.DeviceCertificateStatus_DeprecatedStatus,def=0" json:"deprecated_status,omitempty"`
	// Device model information about the device to which the intermediate
	// certificate(s) correspond.
	DeviceInfo *ProvisionedDeviceInfo `protobuf:"bytes,4,opt,name=device_info,json=deviceInfo" json:"device_info,omitempty"`
	// Serial number of the OEM X.509 intermediate certificate for this type
	// of device. Present only if the device is OEM-provisioned.
	OemSerialNumber []byte `protobuf:"bytes,5,opt,name=oem_serial_number,json=oemSerialNumber" json:"oem_serial_number,omitempty"`
	// Status of the device. Optional.
	Status               *DeviceCertificateStatus_Status `protobuf:"varint,6,opt,name=status,enum=widevine.DeviceCertificateStatus_Status,def=0" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *DeviceCertificateStatus) Reset()         { *m = DeviceCertificateStatus{} }
func (m *DeviceCertificateStatus) String() string { return proto.CompactTextString(m) }
func (*DeviceCertificateStatus) ProtoMessage()    {}
func (*DeviceCertificateStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_81b025f3010d998c, []int{1}
}

func (m *DeviceCertificateStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceCertificateStatus.Unmarshal(m, b)
}
func (m *DeviceCertificateStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceCertificateStatus.Marshal(b, m, deterministic)
}
func (m *DeviceCertificateStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceCertificateStatus.Merge(m, src)
}
func (m *DeviceCertificateStatus) XXX_Size() int {
	return xxx_messageInfo_DeviceCertificateStatus.Size(m)
}
func (m *DeviceCertificateStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceCertificateStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceCertificateStatus proto.InternalMessageInfo

const Default_DeviceCertificateStatus_DeprecatedStatus DeviceCertificateStatus_DeprecatedStatus = DeviceCertificateStatus_DEPRECATED_VALID
const Default_DeviceCertificateStatus_Status DeviceCertificateStatus_Status = DeviceCertificateStatus_STATUS_UNKNOWN

func (m *DeviceCertificateStatus) GetDrmSerialNumber() []byte {
	if m != nil {
		return m.DrmSerialNumber
	}
	return nil
}

func (m *DeviceCertificateStatus) GetDeprecatedStatus() DeviceCertificateStatus_DeprecatedStatus {
	if m != nil && m.DeprecatedStatus != nil {
		return *m.DeprecatedStatus
	}
	return Default_DeviceCertificateStatus_DeprecatedStatus
}

func (m *DeviceCertificateStatus) GetDeviceInfo() *ProvisionedDeviceInfo {
	if m != nil {
		return m.DeviceInfo
	}
	return nil
}

func (m *DeviceCertificateStatus) GetOemSerialNumber() []byte {
	if m != nil {
		return m.OemSerialNumber
	}
	return nil
}

func (m *DeviceCertificateStatus) GetStatus() DeviceCertificateStatus_Status {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return Default_DeviceCertificateStatus_Status
}

// List of DeviceCertificateStatus. Used to propagate certificate revocation
// status and device information.
type DeviceCertificateStatusList struct {
	// POSIX time, in seconds, when the list was created. Required.
	CreationTimeSeconds *uint32 `protobuf:"varint,1,opt,name=creation_time_seconds,json=creationTimeSeconds" json:"creation_time_seconds,omitempty"`
	// DeviceCertificateStatus for each system ID.
	CertificateStatus    []*DeviceCertificateStatus `protobuf:"bytes,2,rep,name=certificate_status,json=certificateStatus" json:"certificate_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *DeviceCertificateStatusList) Reset()         { *m = DeviceCertificateStatusList{} }
func (m *DeviceCertificateStatusList) String() string { return proto.CompactTextString(m) }
func (*DeviceCertificateStatusList) ProtoMessage()    {}
func (*DeviceCertificateStatusList) Descriptor() ([]byte, []int) {
	return fileDescriptor_81b025f3010d998c, []int{2}
}

func (m *DeviceCertificateStatusList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceCertificateStatusList.Unmarshal(m, b)
}
func (m *DeviceCertificateStatusList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceCertificateStatusList.Marshal(b, m, deterministic)
}
func (m *DeviceCertificateStatusList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceCertificateStatusList.Merge(m, src)
}
func (m *DeviceCertificateStatusList) XXX_Size() int {
	return xxx_messageInfo_DeviceCertificateStatusList.Size(m)
}
func (m *DeviceCertificateStatusList) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceCertificateStatusList.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceCertificateStatusList proto.InternalMessageInfo

func (m *DeviceCertificateStatusList) GetCreationTimeSeconds() uint32 {
	if m != nil && m.CreationTimeSeconds != nil {
		return *m.CreationTimeSeconds
	}
	return 0
}

func (m *DeviceCertificateStatusList) GetCertificateStatus() []*DeviceCertificateStatus {
	if m != nil {
		return m.CertificateStatus
	}
	return nil
}

// Signed CertificateStatusList
type SignedDeviceCertificateStatusList struct {
	// Serialized DeviceCertificateStatusList. Required.
	CertificateStatusList *DeviceCertificateStatusList `protobuf:"bytes,1,opt,name=certificate_status_list,json=certificateStatusList" json:"certificate_status_list,omitempty"`
	// Signature of certificate_status_list. Signed with root certificate private
	// key using RSASSA-PSS. Required.
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignedDeviceCertificateStatusList) Reset()         { *m = SignedDeviceCertificateStatusList{} }
func (m *SignedDeviceCertificateStatusList) String() string { return proto.CompactTextString(m) }
func (*SignedDeviceCertificateStatusList) ProtoMessage()    {}
func (*SignedDeviceCertificateStatusList) Descriptor() ([]byte, []int) {
	return fileDescriptor_81b025f3010d998c, []int{3}
}

func (m *SignedDeviceCertificateStatusList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedDeviceCertificateStatusList.Unmarshal(m, b)
}
func (m *SignedDeviceCertificateStatusList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedDeviceCertificateStatusList.Marshal(b, m, deterministic)
}
func (m *SignedDeviceCertificateStatusList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedDeviceCertificateStatusList.Merge(m, src)
}
func (m *SignedDeviceCertificateStatusList) XXX_Size() int {
	return xxx_messageInfo_SignedDeviceCertificateStatusList.Size(m)
}
func (m *SignedDeviceCertificateStatusList) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedDeviceCertificateStatusList.DiscardUnknown(m)
}

var xxx_messageInfo_SignedDeviceCertificateStatusList proto.InternalMessageInfo

func (m *SignedDeviceCertificateStatusList) GetCertificateStatusList() *DeviceCertificateStatusList {
	if m != nil {
		return m.CertificateStatusList
	}
	return nil
}

func (m *SignedDeviceCertificateStatusList) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterEnum("widevine.ProvisionedDeviceInfo_WvSecurityLevel", ProvisionedDeviceInfo_WvSecurityLevel_name, ProvisionedDeviceInfo_WvSecurityLevel_value)
	proto.RegisterEnum("widevine.ProvisionedDeviceInfo_ProvisioningMethod", ProvisionedDeviceInfo_ProvisioningMethod_name, ProvisionedDeviceInfo_ProvisioningMethod_value)
	proto.RegisterEnum("widevine.DeviceCertificateStatus_DeprecatedStatus", DeviceCertificateStatus_DeprecatedStatus_name, DeviceCertificateStatus_DeprecatedStatus_value)
	proto.RegisterEnum("widevine.DeviceCertificateStatus_Status", DeviceCertificateStatus_Status_name, DeviceCertificateStatus_Status_value)
	proto.RegisterType((*ProvisionedDeviceInfo)(nil), "widevine.ProvisionedDeviceInfo")
	proto.RegisterType((*DeviceCertificateStatus)(nil), "widevine.DeviceCertificateStatus")
	proto.RegisterType((*DeviceCertificateStatusList)(nil), "widevine.DeviceCertificateStatusList")
	proto.RegisterType((*SignedDeviceCertificateStatusList)(nil), "widevine.SignedDeviceCertificateStatusList")
}

func init() { proto.RegisterFile("bin/fetch_dcsl.proto", fileDescriptor_81b025f3010d998c) }

var fileDescriptor_81b025f3010d998c = []byte{
	// 809 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x55, 0x5d, 0x6f, 0xe2, 0x46,
	0x14, 0x8d, 0x43, 0x20, 0x70, 0xc9, 0x12, 0x33, 0x49, 0xba, 0x6e, 0xb7, 0xf9, 0x72, 0xd5, 0x0a,
	0xed, 0x03, 0xab, 0xd2, 0xb7, 0x3c, 0x2d, 0xc5, 0x93, 0xd4, 0x0a, 0xb1, 0xd1, 0xd8, 0x61, 0x9b,
	0x87, 0x6a, 0xe4, 0xb5, 0x87, 0xec, 0x48, 0xd8, 0xa6, 0xb6, 0xa1, 0xe2, 0xdf, 0x54, 0xaa, 0xd4,
	0xc7, 0x3e, 0xf4, 0x17, 0xae, 0x3c, 0xb6, 0xc3, 0x67, 0xc4, 0x1b, 0x73, 0xee, 0x3d, 0xe7, 0xdc,
	0x83, 0xe7, 0xda, 0x70, 0xfa, 0x99, 0x07, 0x1f, 0x46, 0x2c, 0x71, 0xbf, 0x50, 0xcf, 0x8d, 0xc7,
	0xed, 0x49, 0x14, 0x26, 0x21, 0xaa, 0xfe, 0xc5, 0x3d, 0x36, 0xe3, 0x01, 0x53, 0xff, 0xaf, 0xc0,
	0xd9, 0x20, 0x0a, 0x67, 0x3c, 0xe6, 0x61, 0xc0, 0x3c, 0x8d, 0xcd, 0xb8, 0xcb, 0xf4, 0x60, 0x14,
	0xa2, 0x77, 0x50, 0x8b, 0xe7, 0x71, 0xc2, 0x7c, 0xca, 0x3d, 0x45, 0xba, 0x92, 0x5a, 0x6f, 0x48,
	0x35, 0x03, 0x74, 0x0f, 0xc9, 0x50, 0x8a, 0x43, 0x57, 0xd9, 0xbf, 0x92, 0x5a, 0x35, 0x92, 0xfe,
	0x44, 0x2a, 0x1c, 0xf9, 0x4e, 0x30, 0x1d, 0x39, 0x6e, 0x32, 0x8d, 0x58, 0xa4, 0x94, 0x44, 0x69,
	0x05, 0x43, 0xa7, 0x50, 0xf6, 0x43, 0x8f, 0x8d, 0x95, 0x03, 0x51, 0xcc, 0x0e, 0xe8, 0x12, 0xea,
	0x9e, 0xb0, 0xa5, 0xc9, 0x7c, 0xc2, 0x94, 0xb2, 0xa8, 0x41, 0x06, 0xd9, 0xf3, 0x09, 0x43, 0xe7,
	0x00, 0xa2, 0x93, 0xce, 0x99, 0x13, 0x29, 0x15, 0x31, 0x4a, 0x4d, 0x20, 0x4f, 0xcc, 0x89, 0x10,
	0x87, 0x46, 0xcc, 0xdc, 0x69, 0xc4, 0x93, 0x39, 0x1d, 0xb3, 0x19, 0x1b, 0x2b, 0x87, 0x57, 0x52,
	0xab, 0xd1, 0xf9, 0xd0, 0x2e, 0x52, 0xb6, 0xb7, 0x26, 0x6c, 0x7f, 0x9a, 0x59, 0x39, 0xaf, 0x9f,
	0xd2, 0x6e, 0x9a, 0x7d, 0x3c, 0xc4, 0x7d, 0xfa, 0x68, 0x58, 0x03, 0xdc, 0xd3, 0x6f, 0x75, 0xac,
	0x91, 0x37, 0xf1, 0x72, 0x07, 0xfa, 0x09, 0xea, 0x09, 0x8b, 0x13, 0x9a, 0x0d, 0xa7, 0x54, 0xaf,
	0xa4, 0x56, 0xf5, 0xa6, 0x3c, 0x72, 0xc6, 0x31, 0x23, 0x90, 0x56, 0x32, 0x75, 0xe4, 0xc2, 0xc9,
	0xa4, 0xb0, 0xe4, 0xc1, 0x33, 0xf5, 0x59, 0xf2, 0x25, 0xf4, 0x94, 0x9a, 0x98, 0xab, 0xb3, 0x6b,
	0xae, 0xc1, 0x12, 0xf5, 0x41, 0x30, 0x09, 0x9a, 0x6c, 0x60, 0xaa, 0x09, 0xc7, 0x6b, 0x09, 0xd0,
	0x19, 0x6c, 0x66, 0x90, 0xf7, 0x50, 0x1d, 0x0e, 0x33, 0xf8, 0x67, 0x59, 0x5a, 0x1c, 0x3a, 0xf2,
	0xfe, 0xe2, 0xf0, 0x8b, 0x5c, 0x52, 0xff, 0xdd, 0x07, 0xb4, 0xe9, 0x8d, 0x7e, 0x80, 0xcb, 0x01,
	0x31, 0x87, 0xba, 0xa5, 0x9b, 0x86, 0x6e, 0xdc, 0xd1, 0x07, 0x6c, 0xff, 0x66, 0x6a, 0x6b, 0x16,
	0x08, 0x1a, 0xb7, 0xdd, 0x9e, 0x6d, 0x92, 0x27, 0x7a, 0x8f, 0x9f, 0x7e, 0x35, 0x7f, 0x97, 0x25,
	0xa4, 0xc2, 0x45, 0x81, 0x99, 0xf8, 0x81, 0x6a, 0x78, 0xa8, 0xf7, 0x30, 0xed, 0x61, 0x62, 0xeb,
	0xb7, 0x7a, 0xaf, 0x6b, 0x63, 0x79, 0x1f, 0x5d, 0xc3, 0xf9, 0x72, 0xcf, 0x1d, 0x31, 0x1f, 0x07,
	0x2b, 0x2d, 0xa5, 0xe5, 0x16, 0x8d, 0x6c, 0x6b, 0x39, 0x40, 0x0d, 0x00, 0xd3, 0xee, 0x16, 0xce,
	0x65, 0x74, 0x01, 0xdf, 0xa5, 0xe7, 0x57, 0x5c, 0x2b, 0xe8, 0x1c, 0xbe, 0x2d, 0xea, 0x9b, 0x72,
	0x87, 0x05, 0x3d, 0x75, 0xdb, 0x42, 0xaf, 0xaa, 0xff, 0x1d, 0xc0, 0xdb, 0xec, 0x79, 0xf5, 0x58,
	0x94, 0xf0, 0x11, 0x77, 0x9d, 0x84, 0x59, 0x89, 0x93, 0x4c, 0x63, 0xf4, 0x1e, 0x9a, 0x5e, 0xe4,
	0xd3, 0x98, 0x45, 0xdc, 0x19, 0xd3, 0x60, 0xea, 0x7f, 0x66, 0x91, 0x58, 0x9f, 0x23, 0x72, 0xec,
	0x45, 0xbe, 0x25, 0x70, 0x43, 0xc0, 0xe8, 0x4f, 0x68, 0x7a, 0x6c, 0x12, 0xb1, 0x94, 0xee, 0xd1,
	0x58, 0x08, 0x88, 0x9d, 0x5a, 0xb9, 0x24, 0xaf, 0x38, 0xb5, 0xb5, 0x17, 0x6a, 0x06, 0xdc, 0xc8,
	0x1a, 0x1e, 0x10, 0x9c, 0xce, 0xa8, 0xd1, 0x61, 0xb7, 0xaf, 0x6b, 0x44, 0xf6, 0xd6, 0x7a, 0xd0,
	0xc7, 0x97, 0x65, 0xe3, 0xc1, 0x28, 0x14, 0x8b, 0x58, 0xef, 0x5c, 0xee, 0xb8, 0x91, 0xc5, 0x36,
	0x8a, 0xf7, 0xc2, 0x7b, 0x68, 0x86, 0x6c, 0x3d, 0x60, 0x39, 0x0b, 0x18, 0xb2, 0xd5, 0x80, 0x03,
	0xa8, 0xe4, 0xa9, 0x2a, 0x22, 0x55, 0x6b, 0x77, 0xaa, 0x3c, 0x4b, 0xc3, 0xb2, 0xbb, 0xf6, 0xa3,
	0x45, 0x1f, 0x8d, 0x7b, 0xc3, 0xfc, 0x64, 0x90, 0x5c, 0x47, 0xfd, 0x08, 0xf2, 0x7a, 0x6e, 0x74,
	0x0a, 0x1b, 0xc9, 0xe5, 0x3d, 0xf4, 0x0d, 0xa0, 0x25, 0x94, 0xe0, 0xa1, 0x79, 0x8f, 0x35, 0x59,
	0x52, 0x23, 0xa8, 0xe4, 0x3c, 0x04, 0x6b, 0x2e, 0xf2, 0x5e, 0xba, 0x41, 0x39, 0xa6, 0x1b, 0xd4,
	0xc6, 0x96, 0xad, 0x1b, 0x77, 0x32, 0xa0, 0x13, 0x38, 0xce, 0x61, 0x82, 0xfb, 0xb8, 0x6b, 0x61,
	0x4d, 0x3e, 0x4d, 0x7d, 0x73, 0x30, 0x6d, 0xa4, 0xa6, 0xd1, 0x7f, 0x92, 0x2f, 0x96, 0x54, 0x0b,
	0xcf, 0x96, 0xfa, 0x8f, 0x04, 0xef, 0x5e, 0x09, 0xdc, 0xe7, 0x71, 0x82, 0x3a, 0x70, 0xe6, 0x46,
	0xcc, 0x49, 0x78, 0x18, 0xd0, 0x84, 0xfb, 0x8c, 0xc6, 0xcc, 0x0d, 0x03, 0x2f, 0xce, 0xdf, 0xbb,
	0x27, 0x45, 0xd1, 0xe6, 0x3e, 0xb3, 0xb2, 0x12, 0x1a, 0x00, 0x72, 0x17, 0x62, 0x8b, 0xdb, 0x53,
	0x6a, 0xd5, 0x3b, 0xd7, 0x3b, 0xff, 0x67, 0xd2, 0x74, 0xd7, 0x21, 0xf5, 0x6f, 0x09, 0xae, 0x2d,
	0xfe, 0xfc, 0xf2, 0xe8, 0xb7, 0xcf, 0xfa, 0x07, 0xbc, 0xdd, 0xf4, 0xa5, 0x63, 0x1e, 0x27, 0x62,
	0xda, 0x7a, 0xe7, 0xc7, 0x9d, 0xe6, 0xa9, 0x0e, 0x39, 0x73, 0xb7, 0xca, 0x7f, 0x0f, 0xb5, 0x98,
	0x3f, 0x07, 0x4e, 0xfa, 0xc5, 0x10, 0xbb, 0x70, 0x44, 0x16, 0xc0, 0xd7, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x45, 0x61, 0x1c, 0x8e, 0xcf, 0x06, 0x00, 0x00,
}
